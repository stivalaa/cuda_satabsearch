#!/usr/bin/env python
###############################################################################
#
# ssemap2pml.py - Convert SSE mapping to PyMOL script for visualization
#
# File:    ssemap2pml.py
# Author:  Alex Stivala
# Created: June 2008
#
# $Id: ssemap2pml.py 2117 2009-03-20 07:25:15Z astivala $
# 
###############################################################################

"""

Using the SSE mapping from soln2ssemap.py, which shows pairs of SSE
sequential (from 1) numbers that correspond to each other, produce
a PyMOL (.pml) script to visualize the mapping.

Requires the ptsecstruct.py module to get secondary structures using
DSSP (or STRIDE) (add directory contianing to to PYTHONPATH).

Note that these must be the same definintions used
to produce the mapping, i.e. that the tableaux database and query
were built with, otherwise it won't realy make sense.

"""

import warnings # so we can suppress the annoying tempnam 'security' warning
import sys,os
import getopt
from time import strftime,localtime

import ptsecstruct
from parsessemap import parse_ssemap,SearchMap,QuerySSEMap
from pathdefs import ASTRAL_ROOT


#-----------------------------------------------------------------------------
#
# Function definitions
#
#-----------------------------------------------------------------------------

def get_sses(scopsid, thepdbfile=None):
    """
    Get SSE definitions (residue ranges) from the supplied SCOP sid using
    DSSP. Uses the ptsecstruct.py module, note comments at top of this
    module also regarding ensuring the same definitions are used here
    as for the actual search.

    Parameters:
       scopsid - SCOP identifier to get SSEs for; used to locate file
                 under ASTRAL SCOP hierarchy.
       thepdbfile - (default None) if not None, PDB file to get SSEs for,
                 overriding scopsid.
    Return value:
       list of (chain, start_resi, end_resi, type) tuples sorted by
       ascending residue number. type is 'H' or 'E'.
    """
    if thepdbfile:
        pdbfile = thepdbfile
    else:
        pdbfilename = os.path.join(scopsid[2:4].lower(),
                                   scopsid.lower() + '.ent')
        pdbfile = os.path.join(ASTRAL_ROOT, pdbfilename)

    secstruct = ptsecstruct.read_secstruct_from_dssp(pdbfile)
    return secstruct.get_sse_tuple_list()


def write_pymol_prelude(fh, search_maps):
    """
    Write startup information in PyMOL script (.pml) file.

    Parameters:
       fh - open (write) filehandle to write to
       search_maps - dummy class SearchMap containing:
             queryid - query identifier parsed from comments
             query_ssemap_list - list of dummy class QuerySSEMap containing:
                 domid - id of domain in db
                 score - score of queryid against domid
                 sse_map - list of (i,j) SSE sequential index tuples
             comment_lines - list of comment lines read
    Return value: None
    """
    sys.stdout.write('# generated by ' + os.path.basename(sys.argv[0]) +'\n')
    timestamp = strftime("%d%b%Y %H:%M:%S", localtime())
    sys.stdout.write('# on ' + timestamp + '\n')
    sys.stdout.write('# from \n')
    for cline in search_maps.comment_lines:
        sys.stdout.write(cline)
    sys.stdout.write('#\n')
    sys.stdout.write('#\n')    


def write_pymol_load(fh, domid, score, color, thepdbfile=None):
    """
    Write comands to load specified sturcture into PyMOL

    Parameters:
       fh - open (write) filehandle to write to
       domid - identifier of sructure, filename built from this
       score - socre of matching on this structure (just written as comment)
       color - color name to color the whole structure initially
       thepdbfile - (default None) if not None, PDB file to get SSEs for,
                 overriding scopsid.
       
    Return value: None
    """
    if thepdbfile:
        pdbfile = thepdbfile
    else:
        scopsid = domid
        pdbfilename = os.path.join(scopsid[2:4].lower(),
                                   scopsid.lower() + '.ent')
        pdbfile = os.path.join(ASTRAL_ROOT, pdbfilename)

    if score:
        fh.write('# ID = ' + domid + '\n# SCORE = ' + str(score) + '\n')
    fh.write('load ' + pdbfile + '\n')
    fh.write('color ' + color + ', /'+domid + '\n')



def write_pymol_prelude(fh, search_maps):
    """
    Write startup information in PyMOL script (.pml) file.

    Parameters:
       fh - open (write) filehandle to write to
       search_maps - dummy class SearchMap containing:
             queryid - query identifier parsed from comments
             query_ssemap_list - list of dummy class QuerySSEMap containing:
                 domid - id of domain in db
                 score - score of queryid against domid
                 sse_map - list of (i,j) SSE sequential index tuples
             comment_lines - list of comment lines read
    Return value: None
    """
    sys.stdout.write('# generated by ' + ' '.join(sys.argv) +'\n')
    timestamp = strftime("%d%b%Y %H:%M:%S", localtime())
    sys.stdout.write('# on ' + timestamp + '\n')
    sys.stdout.write('# from \n')
    for cline in search_maps.comment_lines:
        sys.stdout.write(cline)
    sys.stdout.write('#\n')
    sys.stdout.write('#\n')    



def write_pymol_conclusion(fh):
    """
    Write finalizing information in PyMOL script (.pml) file.

    Parameters:
       fh - open (write) filehandle to write to
    Return value: None
    """
    sys.stdout.write('hide everything\n')
    sys.stdout.write('show cartoon\n')



def write_pymol_color_sses(fh, domid, sse_list, color_list):
    """
    Write PyMOL commands to colour the supplied list of SSEs (specified
    as (chain,start,end,type) tuples from get_sses()) the specified colours.

    Parameters:
       fh - open (write) filhandle to write to
       domid - identifier of the structure to colour
       sse_list list of  (chain,start,end,type) tuples specifygin SSEs to color
       color_list - list of color name to color the SSEs

    """
    i = 0
    for (chain, start_resi, end_resi, ssetype) in sse_list:
        fh.write('color ' + color_list[i] + ',' + '/' + domid + '//' + chain +
                 '/' + str(start_resi) + '-' + str(end_resi) + '\n')
        i += 1


def write_pml_color_substructure_matching_query(fh, domid, ssemap_list,
                                                sse_list):
    """
    Color all the SSEs in the structure that have a match in the query
    structure with each a different color from constant list
    - the idea is to call this for both query and
    hit structures, so matching SSEs have the same colors.

    Parameters:
       fh - open (write) filehandle to write PyMOL script to
       domid - identifier of domain to color
       ssemap_list - list of (i,j) tuples matching SSE i (from 1) in query
                    structure with SSE j (from 1) in this structure
       sse_list - list of  (chain,start,end,type) tuples specifyign SSEs in struct
    Return value:
       None
    """
    COLOR_LIST = ['red','green','blue','yellow','magenta','cyan','orange','pink','aquamarine','brightorange','brown','deepolive','deepteal','purple','ruby','violet','wheat','firebrick','hotpink','lead','lime','raspberry','splitpea','sulfur','zink','tantalum']
    color_sse_list = [ sse_list[j-1] for (i,j) in ssemap_list]
    write_pymol_color_sses(fh, domid, color_sse_list, COLOR_LIST)


#-----------------------------------------------------------------------------
#
# Main
#
#-----------------------------------------------------------------------------
    
def usage(progname):
    """
    Print usage message and exit
    """
    
    sys.stderr.write("Usage: " +progname + " [-5] [-d domainid] [-s] [-u query_pdbfile] [-b db_pdbfile] \n")
    sys.stderr.write(
        "-d domainid: only output for this domain, not all\n"
        "-s: color the query structure with matching SSEs also.\n"
        "-5: use new 5-column (name rawscore norm2score zscore pvalue)\n"
        "    format not old 2-column (name rawscore) format\n"
        "-u query_pdbfile:  filename of query PDB file. If not specified then\n"
        "   Only valid if there is only one domain (either becuase -d is\n"
        "   specified or there is only one in the input).\n"
        "-u query_pdbfile:  filename of query PDB file. If not specified then\n"
        "               identifier is used to find in ASTRAL SCOP hierarchy.\n"
        "-b db_pdbfile:  filename of database PDB file. If not specfied then\n"
        "              identifier is used to find in ASTRAL SCOP hierarchy.\n"
        "          Only valid if there is only one domain (either becuase -d is\n"
        "          specified or there is only one in the input).\n"

        
        )
    sys.exit(1)

    
def main():
    """
    main for ssemap2pml.py

    Usage: ssemap2pml.py [-5] [-d domainid] [-s] [-u query_pdbfile] [-b db_pdbfile]

    -d domainid: only output for this domain, not all
    -5: use new 5-column (name rawscore norm2score zscore pvalue) format not
        old 2-column (name rawscore) format
    -s: color the query structure with matching SSEs also.
        Only valid if there is only one domain (either becuase -d is
        specified or there is only one in the input).
    -u query_pdbfile:  filename of query PDB file. If not specified then
                       identifier is used to find in ASTRAL SCOP hierarchy.
    -b db_pdbfile:  filename of database PDB file. If not specfied then
                      identifier is used to find in ASTRAL SCOP hierarchy.
                   Only valid if there is only one domain (either becuase -d is
                   specified or there is only one in the input).

                 
    Input is on stdin, the output of soln2ssemap.py,
    identifier and score (as per input), then
    for each matching a line containing
    i and j separated by a space,
    one per line (with blank line before next id) e.g.:
    
    d1wiua_     -23.0000
    1 1
    3 2
    8 4
    9 5
    11 6
    14 9


    The first SSE number on each line is in the query structure
    (specified in header information), the second
    is in the db structure (d1wiua_ in example).

    Output is a PyMOL script (.pml) on stdout.
    """
    global verbose
    verbose = False

    dbdomid = None
    color_query = False
    query_pdbfile = None
    db_pdbfile = None
    use5col = False

    try:
        opts,args = getopt.getopt(sys.argv[1:], "5sd:u:b:")
    except:
        usage(os.path.basename(sys.argv[0]))
    for opt,arg in opts:
        if opt == "-5": # use 5 column score format
            use5col = True
        elif opt == "-d": # domain id specified, only get this one
            dbdomid = arg
        elif opt == "-s": # also color SSEs matched in the query structure
            color_query = True
        elif opt == "-u":  # query PDB filename
            query_pdbfile = arg
        elif opt == "-b":  # db PDB filename
            db_pdbfile = arg
        else:
            usage(os.path.basename(sys.argv[0]))
        
    if len(args) != 0:
        usage(os.path.basename(sys.argv[0]))

    search_maps = parse_ssemap(sys.stdin, use5col)
    if (color_query and not dbdomid and len(search_maps.query_ssemap_list) > 1):
        sys.stderr.write("WARNING: -s specfied without -d and more than one "
                         "structure on input: ignored -s option\n")
        color_query = False
    if (db_pdbfile and not dbdomid and len(search_maps.query_ssemap_list) > 1):
        sys.stderr.write("ERROR: -b specified without -d and more than one "
                         "structure on input\n")
        sys.exit(1)
        
    query_sses = get_sses(search_maps.queryid, query_pdbfile)
    write_pymol_prelude(sys.stdout, search_maps)

    if color_query:
        write_pymol_load(sys.stdout, search_maps.queryid,
                         None, 'white', query_pdbfile)
        ptsecstruct.write_pml_define_sses(sys.stdout, search_maps.queryid, query_sses)
        # reverse order of (i,j) so that it is the query SSE numbers used
        ssemap = [(j,i) for (i,j) in search_maps.query_ssemap_list[0].sse_map]
        write_pml_color_substructure_matching_query(sys.stdout,
                                                    search_maps.queryid,
                                                    ssemap,
                                                    query_sses)

    for query_ssemap in search_maps.query_ssemap_list:
        if ((not dbdomid) or (query_ssemap.domid == dbdomid)):
            db_sses = get_sses(query_ssemap.domid, db_pdbfile)
            write_pymol_load(sys.stdout, query_ssemap.domid,
                             query_ssemap.score,'white', db_pdbfile)
            ptsecstruct.write_pml_define_sses(sys.stdout, query_ssemap.domid, db_sses)
            write_pml_color_substructure_matching_query(sys.stdout,
                                                        query_ssemap.domid,
                                                        query_ssemap.sse_map,
                                                        db_sses)
    write_pymol_conclusion(sys.stdout)
    
            
if __name__ == "__main__":
    warnings.filterwarnings('ignore', 'tempnam', RuntimeWarning) 
    main()
