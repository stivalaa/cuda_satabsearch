#!/bin/bash
###############################################################################
#
# generate_pml_pdb_for_top_scores.sh - Generate PDB and PML files to show
#                                      alignment in PyMOL of top scoring
#                                      hits from QP tableau search output
#
# File:    generate_pml_pdb_for_top_scores.sh
# Author:  Alex Stivala
# Created: November 2008
#
# For the top 10 (or other) hits according to QP tableau search output
# on stdin, runs the QP tableau matching program on the query and the
# hit.  For each hit, writes a PyMOL script (.pml file) containing a
# visualzation of the matches (maximally similar substructures
# coloured) with the match socre as a comment, and a writes a PDB file
# with structures superimposed.
# Also writes a loadhits_querydomid.pml file to load all superimposed 
# strutures in PyMOL
#
# Optionally also use MUSTANG to generate multiple alignment of all
# the structures.
#
# Usage:
#     generate_pml_pdb_for_top_scores.sh [-q] [-e sse_num_list] [-n num_hits]
#                                        [-m] [-h] query_domid  out_dir
#
#     -q: do not use the ordering constraint (allow nonsequential  matchings)
#
#     -e sse_num_list: list of SSE sequential numbers to select from
#                      query struct rather than whole structure
#
#     -n num_hits : number of top hits to use (default 10)
#
#     -m : also generate multiple alignment of structures with MUSTANG
#          (may take a long time if many structures)
#
#     -h: use fast heuristic (simulated annealing) version instead of QP
#
#     query_domid is the SCOP sid for the query structure
#
#     out_dir is the directory to place output files. It is created
#             if it does not exist.
#
# Then in PyMOL use @output.pml to run the PyMOL script.
#
# Runs the qptabmatchstructs.sh script which Uses the Python script
# pytableaucreate.py to create tableaux for input to the FORTRAN
# tsrchd_sparse program, and Python scripts soln2ssemap.py and
# ssemap2pml.py to process the output of tsrchd_sparse into PyMOL
# script.
#
# Identifiers are assumed to be SCOP sids, and locates files based
# on the ASTRAL_ROOT defined in this script.
#
# Input is tsrchd output file on stdin.  
# Output .pdb and .pml files are written in out_dir - WARNING:
# overwritten if they exist.
#
# Environment variables:
#
#   PATH must contain the location of the Python scripts, ie where this
#   script itself is and the ptgraph/ directory with pytableaucreate.py etc.,
#   and the location of tsrchd_sparse.
#   The dssp program must also be in the PATH.
#
#   PYTHONPATH must contain the directory containing the ptsecstruct.py 
#   and other Python modules used by the Python scripts.
#
# $Id: generate_pml_pdb_for_top_scores.sh 3733 2010-05-31 02:53:38Z alexs $
# 
###############################################################################

# Count chains in a PDB file.  Writes to stdout the number of unique
# chain identifiers in the supplied PDB filename.  Needed since
# MUSTANG can only handle PDB files with a single chain.

function count_chains() {
    pdbfile=$1
    grep '^ATOM' $pdbfile | cut -c22 | sort | uniq | wc -l
    return 0
}
    

# Count MODELs in a PDB file.  Writes to stdout the number of models
# in the supplied PDB filename.  Needed since
# MUSTANG can only handle PDB files with a single model.

function count_models() {
    pdbfile=$1
    grep -c '^MODEL' $pdbfile
    return 0
}


# Root of ASTRAL divided PDB style hierarchy
#ASTRAL_ROOT=/local/charikar/ASTRAL/pdbstyle-1.73
ASTRAL_ROOT=/usr/local/ASTRAL/pdbstyle-1.75

use_ordering=1
sse_num_list=''
sse_num_list_opt=''
num_hits=10
run_mustang=0
use_heuristic=0

while getopts 'sqe:n:mh' opt
do
    case $opt in
    q) use_ordering=0
    ;;
    e) sse_num_list="$OPTARG"
       sse_num_list_opt="-e ${sse_num_list}"
    ;;
    n)
       num_hits="$OPTARG"
       ;;
    m) run_mustang=1
       ;;
    h) use_heuristic=1
       ;;
    ?)
    echo "Usage: $0 [-q] [-h] [-e sse_num_list] [-n num_hits] [-m] query_sid out_dir" >&2
    exit 1
    ;;
    esac
done
shift $(($OPTIND - 1))


if [ $# -ne 2 ]; then
    echo "Usage: $0 [-q] [-h] [-e sse_num_list] [-n num_hits] [-m] query_sid out_dir" >&2
    exit 1
fi

qid=$1
outdir=$2


if [ ! -d ${outdir} ]; then
    mkdir ${outdir}
fi

cd $outdir

qdiv=`echo $qid | cut -c3-4` 
extra_opts="${sse_num_list_opt}"
if [ $use_ordering -eq 0 ]; then
    extra_opts="${extra_opts} -q"
fi
sort_opts="-k2,2n"
if [ $use_heuristic -ne 0 ]; then
    extra_opts="${extra_opts} -h"
    sort_opts="-k2,2nr"
fi

# list of structures (whitespace delimited) for MUSTANG
structlist=${ASTRAL_ROOT}/${qdiv}/${qid}.ent

# filename of .pml file to load all generated superposition .pdb files
loadfile=loadhits_${qid}.pml

echo "# Generated by $0 $*" > $loadfile
echo "# on `date`" >> $loadfile
for dom in `grep -v '^#' | sort $sort_opts | head -${num_hits} | cut -d' ' -f1`
do 
    div=`echo $dom | cut -c3-4` 
    hit_struct=${ASTRAL_ROOT}/${div}/${dom}.ent
    qptabmatchstructs.sh -s ${extra_opts} ${ASTRAL_ROOT}/${qdiv}/${qid}.ent ${hit_struct} > ${qid}_${dom}.pml 2>/dev/null
    if [ $run_mustang -ne 0 ]; then
        # MUSTANG cannot load PDB files with multiple chains; just skip them
        # Also cannot cope with multiple MODELs, skip them too
        num_chains=`count_chains ${hit_struct}`
        num_models=`count_models ${hit_struct}`
        if [ $num_chains -eq 1 -a $num_models -lt 2 ]; then
            structlist="${structlist} ${hit_struct}"
        else
            echo "Skipped ${hit_struct} as it has $num_chains chains and $num_models models" 2>&1
        fi
    fi
    echo "load ${outdir}/${qid}_`echo ${dom} |  tr [a-z] [A-Z]`.pdb" >> $loadfile
done

if [ $run_mustang -ne 0 ]; then
    mustang -i $structlist -o mustang_${qid}
fi
